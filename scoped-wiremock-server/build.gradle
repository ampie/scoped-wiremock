description = 'Scoped WireMock'
buildscript {
    repositories {
        jcenter()
        maven{ url 'http://nexus.standardbank.co.za:8090/nexus/content/repositories/public/'}
    }

    dependencies {
        classpath 'com.bmuschko:gradle-docker-plugin:3.0.3'
    }
}

apply plugin: 'maven'
apply plugin: 'com.bmuschko.docker-remote-api'

import com.bmuschko.gradle.docker.tasks.image.Dockerfile
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.container.*
dependencies {
    compile(project(':scoped-wiremock-common'))
    compileOnly ( "com.github.tomakehurst:wiremock:$WIREMOCK_VERSION")
    compileOnly('junit:junit:4.12')
    compileOnly('javax.enterprise:cdi-api:1.2')
    compile 'commons-io:commons-io:2.5'
    compile 'org.apache.httpcomponents:httpclient:4.5.2'

    compile 'com.fasterxml.jackson.core:jackson-databind:2.6.4'
    compile 'javax.servlet:javax.servlet-api:3.1.0'
    compile 'org.hamcrest:hamcrest-core:1.3'
    compile 'org.mockito:mockito-core:2.0.31-beta'
    compile(project(':cucumber-common'))//TODO naughty... Create a new project just for the Docker container and include Serenity FilterCHain
    testCompile files(this.project(':scoped-wiremock-common').sourceSets.test.output)
    testCompile files(this.project(':scoped-wiremock-common').sourceSets.test.runtimeClasspath)
    testCompile 'org.hamcrest:hamcrest-library:1.3'
}

jar {
    manifest {
        attributes(
                'Main-Class': 'com.sbg.bdd.wiremock.scoped.server.ScopedWireMockServerRunner',
                'Class-Path': configurations.compile.collect { it.getName() }.join(' ') + " scoped-wiremock-integration-cucumber-${version}.jar"
        )
    }
}
task copyRuntimeLibs(type: Copy) {
    dependsOn build
    into "${buildDir}/docker/lib"
    from configurations.runtime
    from(jar)
    from("${rootDir}/scoped-wiremock-integration-cucumber/build/libs/scoped-wiremock-integration-cucumber-${version}.jar")
    rename("scoped-wiremock-server-${version}.jar","scoped-wiremock.jar")
}
task createDockerfile(type: Dockerfile) {
    dependsOn copyRuntimeLibs
    destFile = project.file("${buildDir}/docker/Dockerfile")
    from 'docker.registry.standardbank.co.za/com.sbg.bdd/scoped-wiremock-base:1.0'
    addFile('lib/*', '/wiremock/')
    maintainer 'Ampie Barnard "ampie.barnard@standardbank.co.za"'
}

task buildImage(type: DockerBuildImage) {
    dependsOn createDockerfile
    inputDir = createDockerfile.destFile.parentFile
    tag = 'docker.registry.standardbank.co.za/com.sbg.bdd/scoped-wiremock:0.0.1'
}
task createWireMockContainer(type: DockerCreateContainer) {
    dependsOn buildImage
    targetImageId { buildImage.getImageId() }
    portBindings = ['33000:8080']
    volumes =["${buildDir}/test/output:/wiremock/output", "${buildDir}/test/input:/wiremock/input", "${buildDir}/test/journal:/wiremock/journal"]
    env = ['WM_OPTS=debug;verbose;', 'LOCAL_USER_ID=' + ["id", "-u", System.properties['user.name']].execute().text.trim()]
}

task startWireMockContainer(type: DockerStartContainer) {
    dependsOn createWireMockContainer
    targetContainerId { createWireMockContainer.getContainerId() }
}

task stopWireMockContainer(type: DockerStopContainer) {
    targetContainerId { createWireMockContainer.getContainerId() }
}

task functionalTestMyApp(type: Test) {
    dependsOn startWireMockContainer
    finalizedBy stopWireMockContainer
}
