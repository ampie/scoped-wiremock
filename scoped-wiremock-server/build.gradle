
description = 'Scoped WireMock'
buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'com.bmuschko:gradle-docker-plugin:3.0.7'
    }
}

apply plugin: 'maven'
apply plugin: 'maven'
apply plugin: 'com.bmuschko.docker-remote-api'

import com.bmuschko.gradle.docker.tasks.image.Dockerfile
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.container.*
dependencies {
    compile(project(':scoped-wiremock-common'))
    compile 'commons-io:commons-io:2.5'
    compile 'org.apache.httpcomponents:httpclient:4.5.2'
    compile('com.github.tomakehurst:wiremock:2.6.0') {
        exclude(module: 'httpclient')
    }

    compile 'com.fasterxml.jackson.core:jackson-databind:2.6.4'
    compile 'javax.servlet:javax.servlet-api:3.1.0'
    compile 'org.hamcrest:hamcrest-core:1.3'
    compile 'org.mockito:mockito-core:2.0.31-beta'
    compile('junit:junit:4.12') {
        /* This dependency was originally in the Maven provided scope, but the project was not of type war.
        This behavior is not yet supported by Gradle, so this dependency has been converted to a compile dependency.
        Please review and delete this closure when resolved. */
    }
    compile('javax.enterprise:cdi-api:1.2') {
        /* This dependency was originally in the Maven provided scope, but the project was not of type war.
        This behavior is not yet supported by Gradle, so this dependency has been converted to a compile dependency.
        Please review and delete this closure when resolved. */
    }
    testCompile files(this.project(':scoped-wiremock-common').sourceSets.test.output)
    testCompile files(this.project(':scoped-wiremock-common').sourceSets.test.runtimeClasspath)
    testCompile 'org.hamcrest:hamcrest-library:1.3'
}

jar {
    manifest {
        attributes(
                'Main-Class': 'com.sbg.bdd.wiremock.scoped.server.ScopedWireMockServerRunner',
                'Class-Path': configurations.compile.collect { it.getName() }.join(' '))
    }
}
task copyRuntimeLibs(type: Copy) {
    dependsOn build
    into "${buildDir}/docker/lib"
    from configurations.runtime
    from(jar)
    rename("scoped-wiremock-server-${version}.jar","scoped-wiremock.jar")
}
task createDockerfile(type: Dockerfile) {
    dependsOn copyRuntimeLibs
    destFile = project.file("${buildDir}/docker/Dockerfile")
    from 'docker.registry.standardbank.co.za/com.sbg.automation/scoped-wiremock-base:1.0'
    addFile('lib/*', '/wiremock/')
    maintainer 'Ampie Barnard "ampie.barnard@standardbank.co.za"'
}

task buildImage(type: DockerBuildImage) {
    dependsOn createDockerfile
    inputDir = createDockerfile.destFile.parentFile
    tag = 'docker.registry.standardbank.co.za/com.sbg.automation/scoped-wiremock:0.0.1'
}
task createWireMockContainer(type: DockerCreateContainer) {
    dependsOn buildImage
    targetImageId { buildImage.getImageId() }
    portBindings = ['33000:8080']
    env = ['WM_OPTS=debug;verbose;']
}

task startWireMockContainer(type: DockerStartContainer) {
    dependsOn createWireMockContainer
    targetContainerId { createWireMockContainer.getContainerId() }
}

task stopWireMockContainer(type: DockerStopContainer) {
    targetContainerId { createWireMockContainer.getContainerId() }
}

task functionalTestMyApp(type: Test) {
    dependsOn startWireMockContainer
    finalizedBy stopWireMockContainer
}
