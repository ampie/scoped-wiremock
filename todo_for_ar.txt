1. Move the RecordingSpecification logic to the server side

- make persona root available so that we can get all personas (legacy tests can use guest)
- Add the recordingSpecification as a property on the Mapping json structure
- Move the logic to determine which recording specifications are in scope to the server
-- may want to make CorrelatedScopeAdmin a bit more clever and group mappings per scope,
            maybe even a hierarchical StubMappings implementation
- Do the actual recording/playback on the server

2. Cucumber in Ruby
- implement plugin that creates
-- the global scope,
-- feature scope,
-- scenario scope with guest scope
-- guest scope
-- step start and stop
-- sets the correlation path backdoor on the app

3. Android app
- implement backdoor to set the correlation path
- implement build to include Rest interceptor and the backdoor

I need:

Darren
Corne
Baskhar or sugu

Done
1.
- Mirror the scope tree on the server
- Implement the rest CRUD endpoint at a different url, e.g. /extended_mappings
- We need awareness of user scopes on server because steps occur against execution scopes not user scopes
- Implement startUserScope and stopUserScope and use the format /one/two/:user

2. Extend the EndPointConfigRegistry to return all mockable Endpoints within a certain scope
