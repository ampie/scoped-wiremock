buildscript {
    repositories {
//        maven {url "https://plugins.gradle.org/m2/"}
        mavenLocal()
        maven{ url 'http://nexus.standardbank.co.za:8090/nexus/content/repositories/public/'}
    }
    dependencies {
        classpath "no.nils:wsdl2java:0.10"
        classpath 'org.hibernate.build.gradle:gradle-maven-publish-auth:2.0.1'
    }
}
allprojects {
    apply plugin: 'maven'
    apply plugin: 'maven-publish'
    apply plugin: 'maven-publish-auth'

    group = 'com.sbg.bdd'
    version = '0.0.3'
}

subprojects {
    apply plugin: "no.nils.wsdl2java"
    apply plugin: 'java'
    apply plugin: 'groovy'
    ext {
        WIREMOCK_VERSION='2.6.0'
    }
    dependencies{
        testCompile 'org.slf4j:slf4j-api:1.7.21'
        testCompile 'org.slf4j:slf4j-jdk14:1.7.12'
        testCompile 'junit:junit:4.12'
        testCompile 'org.codehaus.groovy:groovy-all:2.4.5'
        testCompile('org.spockframework:spock-core:0.7-groovy-2.0') {
            exclude module: 'groovy-all'
            exclude module: 'junit'
        }
        testCompile('com.github.goldin:spock-extensions:0.1.4') {
            exclude module: 'groovy-all'
            exclude module: 'spock-core'
            exclude module: 'slf4j-api'
        }

    }
    sourceCompatibility = 1.7
    targetCompatibility = 1.7

    task packageSources(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource

    }
    artifacts.archives packageSources
    repositories {
        mavenLocal()
        maven{ url 'http://nexus.standardbank.co.za:8090/nexus/content/repositories/public/'}
        maven{ url 'http://nexus.standardbank.co.za:8090/nexus/content/repositories/releases/'}
        maven{ url 'http://nexus.standardbank.co.za:8090/nexus/content/repositories/snapshots/'}
//        maven { url 'http://repository.jboss.org/nexus/content/groups/public' }
//        maven { url 'http://repository.jboss.org/nexus/content/repositories/deprecated' }
//        maven { url "http://repo.maven.apache.org/maven2" }
//        maven { url "https://plugins.gradle.org/m2/" }
    }


    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives sourcesJar, javadocJar
    }
    publishing {
        repositories {
            maven {
                name 'releases'
                url 'http://nexus.standardbank.co.za:8090/nexus/content/repositories/releases/'
            }
        }
        publications {
            mavenJava(MavenPublication) {

                println "Publishing $project.name:$project.group:$project.version"
                groupId 'com.sbg.bdd'
                artifactId "$project.name"

                from components.java

                artifact sourcesJar {
                    classifier "sources"
                }

                artifact javadocJar {
                    classifier "javadoc"
                }

                pom.withXml {
                    asNode().children().last() + {
                        resolveStrategy = Closure.DELEGATE_FIRST
                        name "$rootProject.name"
                        description "A cucumber plugin that provides WireMock integration and complex scoping"
                        licenses {
                            license {
                                name 'The Apache Software License, Version 2.0'
                                url 'http://www.apache.org/license/LICENSE-2.0.txt'
                                distribution 'repo'
                            }
                        }
                        developers {
                            developer {
                                id 'ampie'
                                name 'Ampie Barnard'
                                email 'ampie.barnard@standardbank.co.za'
                            }
                        }
                    }
                    // Preserve compile-scope dependencies
                    asNode().dependencies.'*'.findAll() {
                        it.scope.text() == 'runtime' && project.configurations.compile.allDependencies.find { dep ->
                            dep.name == it.artifactId.text()
                        }
                    }.each() {
                        it.scope*.value = 'compile'
                    }
                }
            }
        }
    }
}
